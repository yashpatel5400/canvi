---
- name: AWS EC2
  block:
    - name: Gather AMI facts
      ec2_ami_info:
        image_ids: "{{ aws_ec2_ami }}"
      register: ami_facts
    - name: Store AMI facts
      set_fact:
        ami: "{{ ami_facts.images | first }}"
    - name: Create EC2 key from local key
      local_action:
        module: ec2_key
        name: local_key
        key_material: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"
      register: ssh_key
    - name: Security group
      ec2_group:
        name: Allow access on ports
        description: SSH, NFS, Redis, Streamlit, RQ Dashboard
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
            rule_desc: allow all on port 22
          - proto: tcp
            from_port: 2049
            to_port: 2049
            cidr_ip: 0.0.0.0/0
            rule_desc: allow all on port 2049
          - proto: tcp
            from_port: 6379
            to_port: 6379
            cidr_ip: 0.0.0.0/0
            rule_desc: allow all on port 6379
          - proto: tcp
            from_port: 8501
            to_port: 8501
            cidr_ip: 0.0.0.0/0
            rule_desc: allow all on port 8501
          - proto: tcp
            from_port: 9181
            to_port: 9181
            cidr_ip: 0.0.0.0/0
            rule_desc: allow all on port 9181
      delegate_to: localhost
      register: security_group
    - name: Gather VPC facts
      ec2_vpc_subnet_info:
        filters:
          vpc-id: "{{ security_group.vpc_id }}"
      register: subnet_info
    - name: Set VPC facts
      set_fact:
        subnet_ids: "{{ subnet_info.subnets|map(attribute='id')|list }}"
    - name: EFS mount targets
      set_fact:
        mount_targets: "{{ mount_targets|default([]) + [ {'subnet_id': item, 'security_groups': [ security_group.group_id ] } ] }}"
      with_items:
        - "{{ subnet_ids }}"
    - name: EFS provisioning
      community.aws.efs:
        state: present
        name: sbibm
        tags:
            Name: sbibm
            purpose: file-storage
        targets: "{{ mount_targets }}"
    - name: Provision single EC2 instance
      community.aws.ec2_instance:
        instance_type: "{{ aws_ec2_instance_type }}"
        image_id: "{{ aws_ec2_ami }}"
        key_name: "{{ ssh_key.key.name }}"
        security_group: "{{ security_group.group_id }}"
        wait: yes
        cpu_options:
          core_count: "{{ aws_ec2_core_count }}"
          threads_per_core: "{{ aws_ec2_threads_count }}"
        tags:
          name: "{{ aws_ec2_tag_name }}"
          Role: "{{ aws_ec2_tag_role }}"
        name: "{{ aws_ec2_tag_name }}"
        volumes:
          - device_name: "{{ ami.root_device_name }}"
            ebs:
              volume_type: gp2
              volume_size: "{{ aws_ec2_root_volume_size }}"
              delete_on_termination: yes
      delegate_to: localhost
      register: instances
    - debug: msg="{{ instances }}"
      delegate_to: localhost
    - name: Wait for the instances to boot by checking the ssh port
      wait_for: host="{{ item.public_ip_address }}" port=22 delay=10 timeout=300 state=started
      with_items: "{{ instances.instances }}"
      delegate_to: localhost
    - name: Refresh inventory
      meta: refresh_inventory
